install.packages("reticulate")
install.packages("tinytex")
tinytex::install_tinytex()
library(car)
library("car")
install.packages("car")
library("car")
qqPlot(iris$Sepal.Width, distribution = "Poisson", lambda = 2)
qqPlot(iris$Sepal.Width, distribution = "pois", lambda = 2)
#1.- Carga los datos.
library(readr)
setwd("~/Github projects/series-temporales-multivariantes/2. Casos de estudio en R/E. Datos macroeconómicos de mayor dimensión")
dat= read_csv("Mac_Ric.csv")
# Guarda en variables separadas y convierte en objeto ts las siguientes 7 variables
# endógenas: LREERS, RIRR, LRGDPPCR, LPR2COMM5, OPENY, FBYA, NFAOFPY.
LREERS = ts(dat$LREERS, start = c(1970,1), frequency = 4)
RIRR = ts(dat$RIRR, start = c(1970,1), frequency = 4)
LRGDPPCR = ts(dat$LRGDPPCR, start = c(1970,1), frequency = 4)
LPR2COMM5 = ts(dat$LPR2COMM5, start = c(1970,1), frequency = 4)
OPENY = ts(dat$OPENY, start = c(1970,1), frequency = 4)
FBYA = ts(dat$FBYA, start = c(1970,1), frequency = 4)
NFAOFPY = ts(dat$NFAOFPY, start = c(1970,1), frequency = 4)
# Guarda la unión de todas ellas en un solo objeto (que será de tipo mts)
data = ts.union(LREERS, RIRR, LRGDPPCR, LPR2COMM5, OPENY, FBYA, NFAOFPY)
# Haz un plot de eso. Copia y pega la imagen, que debe ser en una sola imagen
# un plot de todas esas series.
plot.ts(data, plot.type = "single", ylab="", col = 1:7)
# 2.- Haz la prueba de estacionariedad a esa serie multivariante.
library(tseries)
apply(data, 2, adf.test)
# 3.- Diferencia la serie y repite el test de estacionariedad.
library(MTS)
stnry = diffM(data)
#¿Son estacionarias las series univariantes?
apply(stnry, 2, adf.test)
# Copia y pega un plot de las series transformadas
# (en una sola imagen que salgan los 7 gráficos).
plot.ts(stnry, plot.type = "single", ylab="", col = 1:7)
library(vars)
VARselect(stnry, type = "none", lag.max = 10)
var.a <- vars::VAR(stnry,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
#5.- Realiza el test Portmanteau de diagnosis del modelo y explica el resultado
# (según el p.valor obtenido).
## Diagnosis del modelo (Portmanteau test para objetos var)
bv.serial=serial.test(var.a)
bv.serial
plot(bv.serial, names = "LREERS")
#6.- Calcula los pronósticos en un intervalo de 30 períodos hacia el futuro.
# Guarda solamente los de la primera variable LREERS, invierte la transformación
# y devuelve un plot sin ampliar de los datos originales de esa variable y de la
# predicción.
fcast = predict(var.a, n.ahead = 30)
plot(fcast, names = "LREERS")
fcast$fcst
######### Forecast solo para gold
LREERS = fcast$fcst[1]; LREERS
# Extrayendo la columna de pronósticos
x = LREERS$LREERS[,1]; x
# Invirtiendo la diferenciación
tail(data)
x = cumsum(x) + 4.035832
plot.ts(x)
x
plot.ts(x)
# Combinando los datos reales y la predicción en una sola serie de tiempo
LREERSinv =ts(c(data[,1], x),
start = c(1970,1), frequency = 4)
# Dibujando todo
plot(LREERSinv)
par(mar=c(1,1,1,1))
plot.ts(x)
# Dibujando todo
plot(LREERSinv)
#7.- Amplía el gráfico (escoge solamente los valores del 100:159) y haz el mismo
# gráfico pero con colores que separen los pronósticos de los datos del pasado.
plot.ts(LREERSinv[100:159])
cls
clear
ls
#1.- Carga los datos.
library(readr)
setwd("~/Github projects/series-temporales-multivariantes/2. Casos de estudio en R/E. Datos macroeconómicos de mayor dimensión")
dat= read_csv("Mac_Ric.csv")
View(dat)
# Guarda en variables separadas y convierte en objeto ts las siguientes 7 variables
# endógenas: LREERS, RIRR, LRGDPPCR, LPR2COMM5, OPENY, FBYA, NFAOFPY.
LREERS = ts(dat$LREERS, start = c(1970,1), frequency = 4)
RIRR = ts(dat$RIRR, start = c(1970,1), frequency = 4)
LRGDPPCR = ts(dat$LRGDPPCR, start = c(1970,1), frequency = 4)
LPR2COMM5 = ts(dat$LPR2COMM5, start = c(1970,1), frequency = 4)
OPENY = ts(dat$OPENY, start = c(1970,1), frequency = 4)
FBYA = ts(dat$FBYA, start = c(1970,1), frequency = 4)
NFAOFPY = ts(dat$NFAOFPY, start = c(1970,1), frequency = 4)
# Guarda la unión de todas ellas en un solo objeto (que será de tipo mts)
data = ts.union(LREERS, RIRR, LRGDPPCR, LPR2COMM5, OPENY, FBYA, NFAOFPY)
# Haz un plot de eso. Copia y pega la imagen, que debe ser en una sola imagen
# un plot de todas esas series.
plot.ts(data, plot.type = "single", ylab="", col = 1:7)
## Dividir la serie en conjunto de entrenamiento y de prueba
library(dplyr)
n_obs=30
end=dim(data)[1]
X_train = data[1:(end-n_obs),]
X_test = data[(end-n_obs+1):end,]
dim(X_test)
# 2.- Haz la prueba de estacionariedad a esa serie multivariante.
library(tseries)
apply(X_train, 2, adf.test)
# 3.- Diferencia la serie y repite el test de estacionariedad.
library(MTS)
stnry = diffM(X_train)
#¿Son estacionarias las series univariantes?
apply(stnry, 2, adf.test)
# Copia y pega un plot de las series transformadas
# (en una sola imagen que salgan los 7 gráficos).
plot.ts(stnry, plot.type = "single", ylab="", col = 1:7)
#4.- Crea un modelo VAR (pon lag.max = 10) y di de qué orden es el modelo obtenido.
# Identificación del orden del modelo
library(vars)
VARselect(stnry, type = "none", lag.max = 10)
# Creando el modelo
var.a <- vars::VAR(stnry,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
#5.- Realiza el test Portmanteau de diagnosis del modelo y explica el resultado
# (según el p.valor obtenido).
## Diagnosis del modelo (Portmanteau test para objetos var)
bv.serial=serial.test(var.a)
bv.serial
#6.- Calcula los pronósticos en un intervalo de 30 períodos hacia el futuro.
# Guarda solamente los de la primera variable LREERS, invierte la transformación
# y devuelve un plot sin ampliar de los datos originales de esa variable y de la
# predicción.
fcast = predict(var.a, n.ahead = 30)
plot(fcast, names = "LREERS")
######### Forecast solo para gold
LREERS = fcast$fcst[1]; LREERS
# Extrayendo la columna de pronósticos
x = LREERS$LREERS[,1]; x
# Invirtiendo la diferenciación
tail(data)
# Invirtiendo la diferenciación
tail(X_train)
x = cumsum(x) + 4.602934
plot.ts(x)
# Combinando los datos reales y la predicción en una sola serie de tiempo
LREERSinv =ts(c(X_train[,1], x),
start = c(1970,1), frequency = 4)
# Dibujando todo
plot(LREERSinv)
library(lattice)
library(grid)
library(zoo)
# Objeto zoo
xx = zoo(DAXinv[100:159])
# Objeto zoo
xx = zoo(LREERSinv[100:159])
xyplot(xx, grid=TRUE, panel = function(xx, y, ...){
panel.xyplot(xx, y, col="red", ...)
grid.clip(unit(68, "native"), just=c("right"))
panel.xyplot(xx, y, col="green", ...) })
####### Cargando los datos:
# En este caso el dataset ya se encuentra dentro de R con el nombre "EuStockMarkets"
data(EuStockMarkets)
View(EuStockMarkets)
class(EuStockMarkets)
head(EuStockMarkets)
frequency(EuStockMarkets)
start(EuStockMarkets)
# Librería para el test ADF de estacionariedad
library(tseries)
# Con plot:
plot(EuStockMarkets)
# Con autoplot:
library(ggplot2)
library(ggfortify)
autoplot(EuStockMarkets)
## Dividir la serie en conjunto de entrenamiento y de prueba
library(dplyr)
n_obs=30
end=dim(EuStockMarkets)[1]
X_train = EuStockMarkets[1:(end-n_obs),]
X_test = EuStockMarkets[(end-n_obs+1):end,]
dim(X_test)
####### Prueba de estacionariedad
apply(X_train, 2, adf.test) #2 para especificar que lo queremos aplicar por columnas
## Diferenciando todo la mts
library(MTS)
stnry = diffM(X_train)
# Volviendo a hacer el test:
apply(stnry, 2, adf.test)
plot.ts(stnry)
# Identificación del orden del modelo
library(vars)
VARselect(stnry, type = "none", lag.max = 10)
# Creando el modelo
var.a <- vars::VAR(stnry,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
# Causalidad de Granger
causality(var.a, cause = c("DAX"))
causality(var.a, cause = c("SMI"))
causality(var.a, cause = c("CAC"))
causality(var.a, cause = c("FTSE"))
# Diagnosis del modelo (Portmanteau test para objetos var)
serial.test(var.a)
fcast = predict(var.a, n.ahead = 30)
plot(fcast)
# Volviendo a hacer el test:
apply(stnry, 2, adf.test)
stnry2 = diffM(stnry)
# Volviendo a hacer el test:
apply(stnry2, 2, adf.test)
plot.ts(stnry2)
VARselect(stnry2, type = "none", lag.max = 10)
# Creando el modelo
var.a <- vars::VAR(stnry,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
# Creando el modelo
var.a <- vars::VAR(stnry2,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
# Causalidad de Granger
causality(var.a, cause = c("DAX"))
causality(var.a, cause = c("SMI"))
causality(var.a, cause = c("CAC"))
causality(var.a, cause = c("FTSE"))
# Diagnosis del modelo (Portmanteau test para objetos var)
serial.test(var.a)
# Creando el modelo
var.a <- vars::VAR(stnry2,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
# Causalidad de Granger
causality(var.a, cause = c("DAX"))
causality(var.a, cause = c("SMI"))
causality(var.a, cause = c("CAC"))
causality(var.a, cause = c("FTSE"))
# Diagnosis del modelo (Portmanteau test para objetos var)
serial.test(var.a)
fcast = predict(var.a, n.ahead = 30)
plot(fcast)
# Solo para DAX
DAX = fcast$fcst[1]; DAX
# Extrayendo la columna de pronósticos
x = DAX$DAX[,1]; x
####### Cargando los datos:
# En este caso el dataset ya se encuentra dentro de R con el nombre "EuStockMarkets"
data(EuStockMarkets)
View(EuStockMarkets)
class(EuStockMarkets)
head(EuStockMarkets)
frequency(EuStockMarkets)
start(EuStockMarkets)
# Librería para el test ADF de estacionariedad
library(tseries)
# Con plot:
plot(EuStockMarkets)
# Con autoplot:
library(ggplot2)
library(ggfortify)
autoplot(EuStockMarkets)
## Dividir la serie en conjunto de entrenamiento y de prueba
library(dplyr)
n_obs=30
end=dim(EuStockMarkets)[1]
X_train = EuStockMarkets[1:(end-n_obs),]
X_test = EuStockMarkets[(end-n_obs+1):end,]
dim(X_test)
####### Prueba de estacionariedad
apply(X_train, 2, adf.test) #2 para especificar que lo queremos aplicar por columnas
## Diferenciando todo la mts
library(MTS)
stnry = diffM(X_train)
# Volviendo a hacer el test:
apply(stnry, 2, adf.test)
plot.ts(stnry)
# Identificación del orden del modelo
library(vars)
VARselect(stnry, type = "none", lag.max = 10)
# Creando el modelo
var.a <- vars::VAR(stnry,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
# Causalidad de Granger
causality(var.a, cause = c("DAX"))
causality(var.a, cause = c("SMI"))
causality(var.a, cause = c("CAC"))
causality(var.a, cause = c("FTSE"))
# Diagnosis del modelo (Portmanteau test para objetos var)
serial.test(var.a)
stnry2 = diffM(stnry)
apply(stnry2, 2, adf.test)
VARselect(stnry2, type = "none", lag.max = 10)
# Creando el modelo
var.a <- vars::VAR(stnry2,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
# Causalidad de Granger
causality(var.a, cause = c("DAX"))
causality(var.a, cause = c("SMI"))
causality(var.a, cause = c("CAC"))
causality(var.a, cause = c("FTSE"))
# Diagnosis del modelo (Portmanteau test para objetos var)
serial.test(var.a)
fcast = predict(var.a, n.ahead = 30)
plot(fcast)
# Solo para DAX
DAX = fcast$fcst[1]; DAX
# Extrayendo la columna de pronósticos
x = DAX$DAX[,1]; x
# Invirtiendo la diferenciación
tail(X_train)
tail(stnry)
x = cumsum(x) + 5961.45 + 56.30
plot.ts(x)
plot.ts(x)
### Evaluacion del modelo
rmse=sqrt(mean((X_test[,1]-x)^2))
rmse
View(X_test)
View(X_test)
####### Cargando los datos:
# En este caso el dataset ya se encuentra dentro de R con el nombre "EuStockMarkets"
data(EuStockMarkets)
View(EuStockMarkets)
class(EuStockMarkets)
head(EuStockMarkets)
frequency(EuStockMarkets)
start(EuStockMarkets)
# Librería para el test ADF de estacionariedad
library(tseries)
# Con plot:
plot(EuStockMarkets)
# Con autoplot:
library(ggplot2)
library(ggfortify)
autoplot(EuStockMarkets)
## Dividir la serie en conjunto de entrenamiento y de prueba
library(dplyr)
n_obs=30
end=dim(EuStockMarkets)[1]
X_train = EuStockMarkets[1:(end-n_obs),]
X_test = EuStockMarkets[(end-n_obs+1):end,]
dim(X_test)
####### Prueba de estacionariedad
apply(X_train, 2, adf.test) #2 para especificar que lo queremos aplicar por columnas
# Solución 2
logdata = log(X_train)
# Volviendo a hacer el test:
apply(logdata, 2, adf.test)
stnry = diffM(logdata)
# Volviendo a hacer el test:
apply(stnry, 2, adf.test)
plot.ts(stnry)
# Identificación del orden del modelo
library(vars)
VARselect(stnry, type = "none", lag.max = 10)
# Creando el modelo
var.a <- vars::VAR(stnry,
lag.max = 10,
ic = "AIC",
type = "none")
summary(var.a)
# Causalidad de Granger
causality(var.a, cause = c("DAX"))
causality(var.a, cause = c("SMI"))
causality(var.a, cause = c("CAC"))
# Causalidad de Granger
causality(var.a, cause = c("DAX"))
causality(var.a, cause = c("FTSE"))
# Diagnosis del modelo (Portmanteau test para objetos var)
serial.test(var.a)
VARselect(stnry, type = "none", lag.max = 15)
fcast = predict(var.a, n.ahead = 30)
# Solo para DAX
DAX = fcast$fcst[1]; DAX
# Extrayendo la columna de pronósticos
x = DAX$DAX[,1]; x
# Invirtiendo la diferenciación
tail(X_train)
x = exp(cumsum(x) + 5961.45)
plot.ts(x)
plot.ts(x)
# Extrayendo la columna de pronósticos
x = DAX$DAX[,1]; x
x = cumsum(x) + 5961.45
exp(x)
# Extrayendo la columna de pronósticos
x = DAX$DAX[,1]; x
tail(logdata)
x = cumsum(x) + 8.693069
exp(x)
# Extrayendo la columna de pronósticos
x = DAX$DAX[,1]; x
x
x = exp(cumsum(x) + 8.693069)
### Evaluacion del modelo
rmse=sqrt(mean((X_test[,1]-x)^2))
rmse
